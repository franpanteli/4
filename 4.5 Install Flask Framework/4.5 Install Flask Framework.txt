-> Flask Installation & Setup Lesson  
   -> Install Flask Framework  

-> Introduction to Flask Installation  
   -> Before you begin installing Flask, ensure that you have successfully created and activated your virtual environment  
      -> Your virtual environment is an isolated workspace where you can install Python packages without affecting your system's global Python installation  
      -> To confirm your virtual environment is activated, you should see the environment name (e.g., `env`) at the start of your terminal prompt  
         -> Example: `(env) user-name@your-computer:flask-webdev$`  
   -> If you can see this prompt, it means you're in the right environment, and you can now proceed with Flask installation  

-> Install Flask  
   -> To install Flask, you will use `pip`, which is Python's package installer  
   -> In your terminal, with the virtual environment activated, enter the following command:  
      -> `pip install flask`  
   -> What happens when you run this command?  
      -> `pip` will connect to the Python Package Index (PyPI), which is a repository of open-source Python libraries  
      -> `pip` will then download Flask and all its dependencies into your virtual environment  
         -> Flask relies on a number of other libraries to function, including `Werkzeug` (for WSGI functionality), `Jinja2` (for templating), and `MarkupSafe` (for HTML escaping)  
      -> These libraries will be installed automatically by `pip` to ensure Flask runs smoothly  

-> Verifying Flask Installation  
   -> After Flask has been installed, it's important to verify that everything has been set up correctly  
      -> You can do this by testing if Flask can be imported without errors in a Python session  
   -> To verify, first start a Python session by typing `python` or `python3` in your terminal  
      -> You should see the Python interactive shell prompt, which looks like this:  
         -> `>>>`  
   -> Then, try importing Flask by typing the following command into the Python shell:  
      -> `>>> import flask`  
   -> If no errors appear and you're returned to the Python shell prompt without any messages, the installation was successful  
   -> If you encounter any errors, check the following:  
      -> Ensure your virtual environment is still activated (look for the `(env)` at the start of your terminal prompt)  
      -> Make sure you typed `pip install flask` correctly and that the installation completed without issues  

-> What if the installation fails?  
   -> If you receive an error when trying to import Flask, it could be for a few reasons:  
      -> You might not have installed Flask in the right environment'double-check that the virtual environment is activated  
      -> There might have been an issue during the installation process'try running `pip install flask` again and check for any error messages  
      -> If you're using a specific version of Python (e.g., Python 3), make sure you're using the correct version of `pip` by running `pip3 install flask` instead  
   -> If these steps don't resolve the issue, consider deleting the virtual environment and recreating it, then reinstall Flask  

-> Understanding Python and Flask's Dependencies  
   -> Flask is a micro web framework for Python, which means it's designed to be simple and lightweight but still powerful enough to build full-fledged web applications  
   -> When you install Flask using `pip install flask`, you're also installing its dependencies, which include:  
      -> **Werkzeug**: A library that provides utility functions for WSGI (Web Server Gateway Interface), which is the standard interface between web servers and Python applications  
      -> **Jinja2**: A templating engine that Flask uses to generate dynamic HTML pages by embedding Python-like expressions within HTML files  
      -> **MarkupSafe**: Ensures that the output generated by Jinja2 is safe from code injection attacks by escaping unsafe characters in strings  
   -> Flask's installation automatically manages these dependencies, so you don't have to worry about installing them individually  

-> Next Steps  
   -> Now that Flask is installed and verified, you're ready to begin developing your first Flask application  
   -> The next lesson will guide you through the process of setting up a basic Flask app, creating routes, and handling requests  
   -> But before that, test your knowledge of Flask installation by taking a short quiz on the setup process and ensuring that you've understood all the necessary steps so far  
   -> Once you're comfortable with the installation process, you'll move on to developing your Flask app, including setting up routes, templates, and handling HTTP methods  

-> Conclusion  
   -> You've now completed the Flask installation and verification process successfully  
   -> With Python installed and Flask set up in your virtual environment, you're in a great position to begin building Flask applications  
   -> Make sure to always activate your virtual environment before working on your project to ensure that the correct dependencies are used  
   -> Ready to start coding your first Flask app? Click on the next lesson to continue your journey with Flask web development  
